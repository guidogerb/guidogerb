const CACHE_NAME = "guidogerb-cache-v1";
const INITIAL_CACHED_RESOURCES = [
  "/",
  "/index.html",
  "/offline.html",
  "/assets/main-BvQcH7J_.js",
  "/assets/main-BEX1ocfc.css",
  "/icons/favicon.ico",
  "/manifest.json",
  "/manifest.webmanifest"
];
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return Promise.allSettled(
        INITIAL_CACHED_RESOURCES.map(async (url) => {
          try {
            const response = await fetch(url);
            if (!response.ok) {
              throw new Error(`Failed to fetch ${url}`);
            }
            await cache.put(url, response);
            console.log(`Successfully cached: ${url}`);
          } catch (error) {
            console.warn(`Failed to cache: ${url}`, error);
          }
        })
      );
    })
  );
});
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
self.addEventListener("fetch", (event) => {
  if (!event.request.url.startsWith(self.location.origin)) {
    return;
  }
  event.respondWith(
    fetch(event.request).then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const responseToCache = response.clone();
      caches.open(CACHE_NAME).then((cache) => {
        cache.put(event.request, responseToCache);
      });
      return response;
    }).catch(async () => {
      const cachedResponse = await caches.match(event.request);
      if (cachedResponse) {
        return cachedResponse;
      }
      if (event.request.mode === "navigate") {
        const cachedIndex = await caches.match("/index.html");
        if (cachedIndex) {
          return cachedIndex;
        }
        return caches.match("/offline.html");
      }
      return new Response("Network error happened", {
        status: 404,
        headers: { "Content-Type": "text/plain" }
      });
    })
  );
});
self.addEventListener("push", (event) => {
  var _a;
  const options = {
    body: ((_a = event.data) == null ? void 0 : _a.text()) || "No content",
    icon: "/icons/favicon.ico",
    // Use favicon as fallback if other icons aren't available
    icons: "/icons/icons-192x192.png",
    badge: "/icons/badge-72x72.png"
  };
  event.waitUntil(
    self.registration.showNotification("GuidoGerb Publishing", options)
  );
});
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3cubWpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9
