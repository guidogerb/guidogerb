{
  "compileOnSave": true,
  "compilerOptions": {
    /* Basic Options */
    "target": "ES2020", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ], /* Specify library files to be included in the compilation:  */
    "allowJs": true, /* Allow JavaScript files to be compiled. */
    "checkJs": true, /* Report errors in .js files. */
    "module": "ESNext", /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'. */
    "jsx": "react-jsx", /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true, /* Generates corresponding '.d.ts' file. */
    "declarationMap": true, /* go to js file when using IDE functions like "Go to Definition" in VSCode */
    "emitDeclarationOnly": true, /* This compiler run should only output d.ts files */
    // "sourceMap": true, /* Generates corresponding '.map' file. */
    // "outFile": "./", /* Concatenate and emit output√ò to single file. */
    "outDir": "./dist", /* Redirect output structure to the directory. */
    "outFile": "./dist/index.js", /* Where to put the built types file - converts to index.d.ts */
    "rootDir": "../", /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    "removeComments": true, /* Do not emit comments to output. */
    "noEmit": true, /* Do not emit outputs. */
    "importHelpers": true, /* Import emit helpers from 'tslib'. */
    "downlevelIteration": true, /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    "isolatedModules": true, /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "allowSyntheticDefaultImports": true, /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,

    /* Strict Type-Checking Options */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Raise error on expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true, /* Enable strict null checks. */
    "noImplicitThis": true, /* Raise error on 'this' expressions with an implied 'any' type. */
    "alwaysStrict": true, /* Parse in strict mode and emit "use strict" for each source file. */
    /* Additional Checks */
    "noUnusedLocals": true, /* Report errors on unused locals. */
    "noUnusedParameters": true, /* Report errors on unused parameters. */
    "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
    "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
    /* Module Resolution Options */
    "moduleResolution": "bundler", /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./", /* Base directory to resolve non-absolute module names. */
    "paths": {
      "design-system": [
        // maybe this should point to the artifacts/index.d.ts file in the design system library instead?
        "../design-system/@types/jsDocTypes.d.js"
      ],
      "design-system-website": [
        "src/@types/jsDocTypes.d.js"
      ],
      "design-system-header": [
        "../design-system-header/artifacts/index.d.ts"
      ]
    }, /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    "rootDirs": [], /* List of root folders whose combined content represents the structure of the project at runtime. */
    "typeRoots": [
      "node_modules/@types",
      "src/@types"
    ], /* List of folders to include type definitions from. */
    "types": [], /* Type declaration files to be included in compilation. */
    /* Source Map Options */
    // "sourceRoot": "./", /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    "mapRoot": "./", /* Specify the location where debugger should locate map files instead of generated locations. */
    "sourceMap": true,
    // "inlineSourceMap": true, /* Emit a single file with source maps instead of having a separate file. */
    "inlineSources": true, /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    /* Experimental Options */
    "experimentalDecorators": true, /* Enables experimental support for ES7 decorators. */
    "emitDecoratorMetadata": true, /* Enables experimental support for emitting type metadata for decorators. */
    "esModuleInterop": true, // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
    "noUncheckedIndexedAccess": true, // accessing index must always check for undefined
  },
  "include": [
    "src"
  ],
  "references": [
    { "path": "./tsconfig.node.json" }
  ],
  "exclude": [
    "reporters*",
    "**/vitest/**/*",
    "node_modules/**/*",
    "../design-system-header/artifacts/**/*"
  ]
}
